package com.example.shopinglist.data

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import com.example.shopinglist.domain.ShopItem
import com.example.shopinglist.domain.ShopListRepository

object ShopLIstRepositoryImpl : ShopListRepository {

    private val shopListItem: MutableList<ShopItem> = mutableListOf()
    private val shopListLD = MutableLiveData<List<ShopItem>>()

    private var autoGeneratedId = 0

    init {

        for (i in 0 until 10) {
            val item = ShopItem(name = "$i", count = i, isActivated = true)
            insertShopItem(item)
        }
    }

    override fun insertShopItem(item: ShopItem) {
        if (item.id == ShopItem.UNDEFINED_ID) {
            item.id = autoGeneratedId++
        }
        shopListItem.add(item)
        updateLiveData()
    }

    override fun getShopList(): LiveData<List<ShopItem>> {
        return shopListLD
    }

    override fun updateShopItem(item: ShopItem) {
        val oldItem = getShopItemById(item.id)
        shopListItem.remove(oldItem)
        insertShopItem(item)
        updateLiveData()
    }

    override fun getShopItemById(idItem: Int): ShopItem {
        return shopListItem.find { it.id == idItem }
            ?: throw RuntimeException("Item with id: $idItem not found")
    }

    override fun deleteShopItem(item: ShopItem) {
        shopListItem.remove(item)
        updateLiveData()
    }

    private fun updateLiveData(){
        shopListLD.value = shopListItem.toList()
    }
}